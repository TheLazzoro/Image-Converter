// TODO: Break this out into a real library
// <auto-generated>
// ReSharper disable All
#pragma warning disable
// Note: this file is not actually auto-generated, but rather a straight source import from an external library.

namespace Warcraft.Core.Compression.Squish {
    public static class SquishOptionsExtensions
    {
        public static SquishOptions GetMethod(this SquishOptions self)
        {
            return (self & (SquishOptions.DXT1 | SquishOptions.DXT3 | SquishOptions.DXT5));
        }

        public static SquishOptions GetFit(this SquishOptions self)
        {
            return (self & (SquishOptions.ColourIterativeClusterFit | SquishOptions.ColourClusterFit | SquishOptions.ColourRangeFit));
        }

        public static SquishOptions GetMetric(this SquishOptions self)
        {
            return (self & (SquishOptions.ColourMetricPerceptual | SquishOptions.ColourMetricUniform));
        }

        public static SquishOptions GetExtra(this SquishOptions self)
        {
            return (self & (SquishOptions.WeightColourByAlpha));
        }

        public static SquishOptions FixFlags(this SquishOptions flags)
        {
            // grab the flag bits
            var method = (int)(flags & (SquishOptions.DXT1 | SquishOptions.DXT3 | SquishOptions.DXT5));
            var fit = (int) (flags & (SquishOptions.ColourIterativeClusterFit | SquishOptions.ColourClusterFit | SquishOptions.ColourRangeFit));
            var extra = (int) (flags & SquishOptions.WeightColourByAlpha);

            // set defaults
            if (method != (int)SquishOptions.DXT3 && method != (int)SquishOptions.DXT5)
            {
                method = (int) SquishOptions.DXT5;
            }

            if (fit != (int) SquishOptions.ColourRangeFit && fit != (int)SquishOptions.ColourIterativeClusterFit)
            {
                fit = (int) SquishOptions.ColourClusterFit;
            }

            // done
            return (SquishOptions) (method | fit | extra);
        }
    }
}
