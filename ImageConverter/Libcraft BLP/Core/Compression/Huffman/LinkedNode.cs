// TODO: Break this out into a real library
// <auto-generated>
// ReSharper disable All
// Note: this file is not actually auto-generated, but rather a straight source import from an external library.

//
// MpqHuffman.cs
// https://code.google.com/p/mpqtool/source/browse/trunk/MpqTool/Foole.Mpq/MpqHuffman.cs
//
// Authors:
//              Foole (fooleau@gmail.com)
//
// (C) 2006 Foole (fooleau@gmail.com)
// Based on code from StormLib by Ladislav Zezula and ShadowFlare
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//

#nullable disable

namespace Warcraft.Core.Compression.Huffman
{
    // A node which is both hierachcical (parent/child) and doubly linked (next/prev)
    internal class LinkedNode
    {
        public int DecompressedValue;
        public int Weight;
        public LinkedNode Parent;
        public LinkedNode Child0;

        public LinkedNode Child1
                { get { return Child0.Prev; } }

        public LinkedNode Next;
        public LinkedNode Prev;

        public LinkedNode(int decompVal, int weight)
        {
            DecompressedValue = decompVal;
            Weight = weight;
        }

        // TODO: This would be more efficient as a member of the other class
        // ie avoid the recursion
        public LinkedNode Insert(LinkedNode other)
        {
            // 'Next' should have a lower weight
            // we should return the lower weight
            if (other.Weight <= Weight)
            {
                // insert before
                if (Next != null)
                {
                    Next.Prev = other;
                    other.Next = Next;
                }
                Next = other;
                other.Prev = this;
                return other;
            }
            else
            {
                if (Prev == null)
                {
                    // Insert after
                    other.Prev = null;
                    Prev = other;
                    other.Next = this;
                }
                else
                {
                    Prev.Insert(other);
                }
            }
            return this;
        }
    }
}

#nullable enable
